<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{a76c3da7-8f6e-458f-9e74-7b7fc4cfb652}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	previousTime: ULINT := 0;
	currentTime: ULINT := 0;
	
	loTime: ULINT := 0;
	hiTime: ULINT := 0;
	getTime: GETSYSTEMTIME;
	
	deltaTime: REAL := 0.0;
	skippedDeltaTime: REAL := 0.0;
	
	skogestadPID: Skogestad;
	parallelPID: ParallelPID;

	
	lastPID: REAL := 0;
	useSkogestad: BOOL := TRUE;
	
	init: BOOL := TRUE;
	desiredActuator: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Initialization
IF init THEN
    lastPID := GVL.kp + GVL.ki + GVL.kd;
    init := FALSE;
END_IF

// Update the useSkogestad flag if PID values have changed
IF NOT (lastPID = GVL.kp + GVL.ki + GVL.kd) THEN
    useSkogestad := FALSE;
END_IF

// Get current system time
getTime(timeLoDW => loTime, timeHiDW => hiTime);
currentTime := SHL(hiTime, 32) + loTime;

// Calculate deltaTime
IF previousTime = 0 THEN
    previousTime := currentTime;
ELSE
    deltaTime := ULINT_TO_REAL(currentTime - previousTime) / 10000000;
    previousTime := currentTime;
END_IF

IF GVL.currentCycle = GVL.cyclesToSkip THEN
	GVL.currentCycle := 0;
	GVL.arTempData[GVL.currentIndex] := GVL.rTempSensor;
	GVL.arControllerData[GVL.currentIndex] := desiredActuator;
	GVL.arRealPowerData[GVL.currentIndex] := GVL.iRealPower;
	GVL.currentIndex := GVL.currentIndex + 1;
	IF GVL.currentIndex > GVL.iMaxIndex THEN
		GVL.currentIndex := 0;
	END_IF
	
	// Execute skogestad if we should be tuning
	IF useSkogestad THEN
		skogestadPID(
			rFeedbackVariable := GVL.rTempSensor,
			rSetpoint := GVL.rSetpoint,
			rDeltaTime := skippedDeltaTime,
			iOutput => desiredActuator
		);	
	END_IF
	
	skippedDeltaTime := 0;
ELSE
	skippedDeltaTime := skippedDeltaTime + deltaTime;
	GVL.currentCycle := GVL.currentCycle + 1;
END_IF

// Execute PID if we aren't tuning
IF NOT useSkogestad THEN
	parallelPID(
		rFeedbackVariable := GVL.rTempSensor,
		rSetpoint := GVL.rSetpoint,
		rDeltaTime := deltaTime,
		iOutput => desiredActuator
	);
END_IF

// Use conversion formula for the actuator command.
GVL.iHeaterActuator := REAL_TO_INT((desiredActuator - GVL.powerIntercept) / GVL.powerSlope);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>