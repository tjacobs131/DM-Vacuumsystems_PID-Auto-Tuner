<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Skogestad" Id="{aa431b1a-4355-4557-bb11-a5f63cc0b804}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Skogestad EXTENDS ParallelPID
VAR_INPUT
    // Set in superclass
END_VAR
VAR_OUTPUT
    // Set in superclass
END_VAR

VAR CONSTANT
	// Size of the batch to be written as a line to the data file
	// Each line can contain a maximum of 255 character, and will contain temperature and time data
	// Each data point is split by a comma and contains a '#' denotation and a '\n' character at the end
	// Example: 20.0,20.1,20.2...#0.52,1.24,0.83...\n
	// This example will contain 100 characters in the line (batch) with batchSize = 10
	// Keep this in mind if your process variable or time values have more precision (use more than 4 characters per value)
	batchSize: INT := 10;
END_VAR

VAR
	// User config
    _bLoadConfig: BOOL := TRUE; 			// Uses stored system dynamics if true, re-measures the system if false
	_rK1Multiplier: REAL := 1.0;			// 1 = slow response, 0.5 = agressive response. Can be lowered further but risks oscillations and overshoot
	_rRunningStableThreshold: REAL := 0.1;// Range in which the process variable must stabilize during the baseline and step phases
	_rStableWaitTime: REAL := 20;		// Time in which the process variable must remain stable within the stableThreshold
	_iBaselineOutput: INT := 5;			// Controller output to make the process variable reach (~50-70%?) of the setpoint
    _iStepOutput: INT := 20;				// Controller output to make the process variable reach the setpoint
	
	_iTest1	:	INT;
	// Stability check
	checkStability: CheckStability;	// Function block to check for the stability of the process variable
    stabilized: BOOL := FALSE;		// Are we currently stabilized?
    
	// Controller output
	currentOutput: INT := 0;
	
    // Variables for asynchronous batch writing
    batchWritePending: BOOL := FALSE;		// Are we currently writing a batch?
    batchTemp: ARRAY[0..batchSize] OF REAL; // holds one batch of temp data
    batchTime: ARRAY[0..batchSize] OF REAL; // holds one batch of time data
	currentIndex: INT := 0;					// Batch write index
	validEntries: INT := 0;					// The number of variables read from the file
	lastProcessVariable: REAL := 0.0;		// Compared with current process variable to only write new values
	skippedTime: REAL := 0.0;				// The amount of time between new values (time between writes)

	// Processing variables
    lowestProcessVariable: REAL := 9999;
    baselineTime: REAL := 0;
    priorStableValue: REAL := 0.0;
	i: INT := 0;
	
	lambda: REAL := 0.0;    		// Measured dead time or delta time, whichever is higher
	k1: REAL := 0.0;
	
    riseTime: REAL := 0;
    k: REAL := 0;
    deadTime: REAL := 0;
	
	deadTimeFound: BOOL := FALSE;
	riseStarted: BOOL := FALSE;

    tuningPhase: TunePhase := TunePhase.init; 	// Current tuning phase
END_VAR
VAR PERSISTENT 
    
	// Store measured system dynamics for recalculation
	
	// Temperature step-response variables
    baselineProcessVariable: REAL := 0.0;
    stepProcessVariable: REAL := 0.0;

END_VAR
// Use temporary arrays for the batch.
VAR_TEMP
	j: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// If a batch write is pending, call M_WriteData repeatedly until it returns TRUE.
IF batchWritePending THEN
    // M_WriteData is asynchronous. It must be called each cycle until it returns TRUE.
    IF M_WriteData(validEntries := validEntries, tempData := batchTemp, timeData := batchTime, clearFile := FALSE) THEN
         batchWritePending := FALSE;
    END_IF;
END_IF;

IF tuningPhase = TunePhase.baseline OR tuningPhase = TunePhase.step THEN
	// Check for stability during baseline and step phases
	checkStability(rCurrentValue := rFeedbackVariable, 
				   rDeltaTime := rDeltaTime, 
				   rThreshold := _rRunningStableThreshold, 
				   rDuration := 30,
				   rInitialValue := priorStableValue, // Set variable which must be moved away from before stabilizing
				   bIsStable => stabilized);
	
	// Save data in batches during baseline and step phases			   
	IF NOT (lastProcessVariable = rFeedbackVariable)
		AND NOT batchWritePending THEN // Dont update batch arrays if they are being saved
		lastProcessVariable := rFeedbackVariable;
		batchTemp[currentIndex] := INT_TO_REAL(REAL_TO_INT(rFeedbackVariable * 100.0 + 0.05)) / 100.0; // Round feedback variable to two decimal places
		batchTime[currentIndex] := INT_TO_REAL(REAL_TO_INT(skippedTime * 100.0 + 0.05)) / 100.0; // Round delta time to two decimal places
		skippedTime := 0;
		validEntries := currentIndex;
		
		currentIndex := currentIndex + 1;
		IF currentIndex > batchSize THEN
			batchWritePending := TRUE;
			currentIndex := 0;
		END_IF
	ELSE
		skippedTime := skippedTime + rDeltaTime;
	END_IF
	
END_IF

CASE tuningPhase OF
TunePhase.init:

	currentOutput := 0; // Ensure output is off
	
	IF _bLoadConfig THEN
		tuningPhase := TunePhase.processData;	// Skip tuning if using stored variables
		RETURN;
	END_IF
	
    // Wait for stabilization before starting tuning.
    checkStability(rCurrentValue := rFeedbackVariable, 
                   rDeltaTime := rDeltaTime, 
                   rThreshold := 0.2, 
                   rDuration := 30,
                   rInitialValue := -99.9, 
                   bIsStable => stabilized);
    IF stabilized THEN
		M_WriteData(validEntries := validEntries, tempData := batchTemp, timeData := batchTime, clearFile := TRUE); // Clear data file
        tuningPhase := TunePhase.baseline;
		currentOutput := _iBaselineOutput;
		priorStableValue := rFeedbackVariable;
		lastProcessVariable := rFeedbackVariable;
        stabilized := FALSE;
    ELSE
        RETURN;
    END_IF

TunePhase.baseline:

	IF stabilized THEN
		tuningPhase := TunePhase.step;
        currentOutput := _iStepOutput;
		baselineProcessVariable := rFeedbackVariable;
		priorStableValue := rFeedbackVariable;
        stabilized := FALSE;
    END_IF
	
TunePhase.step:

	IF stabilized THEN
		IF NOT (currentIndex = 0) THEN
			batchWritePending := TRUE;
			validEntries := currentIndex;
		END_IF;	
	
        stepProcessVariable := rFeedbackVariable;			// Store measured process variable at step
		currentOutput := 0;
		tuningPhase := TunePhase.processData;
    END_IF
	
TunePhase.processData:

	k := (stepProcessVariable - baselineProcessVariable) / (_iStepOutput - _iBaselineOutput);
	
	// Wait for the batch to finish writing before processing data
	IF batchWritePending THEN
		RETURN;
	END_IF
	
	validEntries := 0;
	
    IF M_ReadData(tempData => batchTemp, timeData => batchTime, validEntries => validEntries) THEN
		IF NOT (validEntries = 0) THEN 
			
			FOR i := 0 TO validEntries - 1 DO
				// Find dead time
				IF NOT deadTimeFound THEN
					IF batchTemp[i] < lowestProcessVariable THEN
						lowestProcessVariable := batchTemp[i];
					END_IF;
					IF batchTemp[i] > lowestProcessVariable + 0.005 * (stepProcessVariable - lowestProcessVariable) THEN
						deadTimeFound := TRUE;
					ELSE
						deadTime := deadTime + batchTime[i];
					END_IF;
				END_IF;
				
				// Measure rise time and baseline time
				riseTime := riseTime + batchTime[i];
				IF NOT riseStarted AND batchTemp[i] > baselineProcessVariable THEN 
					baselineTime := riseTime;
					riseStarted := TRUE;
				END_IF;
				
				// Calculate rise time
				IF batchTemp[i] > baselineProcessVariable + 0.632 * (stepProcessVariable - baselineProcessVariable) THEN // Rise time is defined as 63.2% of total process variable change
					riseTime := riseTime - baselineTime; // Rise time initially contains the total tuning time. Dead time and baseline time should be subtracted from this.
					tuningPhase := TunePhase.done;
					EXIT;
				END_IF;
			END_FOR;
		END_IF;

    END_IF;

TunePhase.done:

	// Calculate final PID gains.
    k1 := (riseTime / (lambda + deadTime)) * _rK1Multiplier;
    lambda := MAX(deadTime, rDeltaTime);
    GVL.kp := riseTime / (k * (lambda + deadTime));
    GVL.ki := GVL.kp / MIN(riseTime, k1 * (lambda + deadTime));
    GVL.kd := 0;
	
	GVL.doTuning := FALSE; // Let PID controller take over
	
END_CASE

iOutput := currentOutput;
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{f0c06880-0956-4c59-bc65-dc99b2fd7b6e}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains 	: BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode 	: BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

	iTest1			: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_iTest1		:=	iTest1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReadData" Id="{a5abc2d6-dab5-4188-bdf7-24efdc9b38c8}">
      <Declaration><![CDATA[METHOD PRIVATE M_ReadData : BOOL
VAR_OUTPUT
    tempData : ARRAY[0..10] OF REAL;
    timeData : ARRAY[0..10] OF REAL;
    validEntries : INT;
END_VAR
VAR
    sPath   : STRING(80) := 'C:\PIDTuner\DataLog.txt';
    sNetId  : T_AmsNetId := ''; // Target system (empty is local)
    
    hashPos : INT;
    tempStr : STRING(100);
    timeStr : STRING(100);
    tempVals: ARRAY[0..10] OF STRING(10);
    timeVals: ARRAY[0..10] OF STRING(10);
    i       : INT;
END_VAR

VAR_STAT
    hFile   : UINT;
    sLine   : STRING(255);    

    fbOpen  : FB_FileOpen;
    fbRead  : FB_FileGets;
    fbClose : FB_FileClose;    

    state   : INT := 0;  // 0: OPEN_FILE, 1: CHECK_OPEN, 2: INITIATE_READ, 3: PROCESS_READ, 4: CLOSE_FILE, 5: DONE/ERROR
    waitCounter : INT := 0;
    returnState: INT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE state OF
// 0: OPEN_FILE
0:
    fbOpen(bExecute:=FALSE);
    fbOpen(sNetId:=sNetId, sPathName:=sPath, nMode:=FOPEN_MODEREAD OR FOPEN_MODETEXT, ePath:=PATH_GENERIC, bExecute:=TRUE);
    state := 1;
    returnState := 1;
    
// 1: CHECK_OPEN
1:
    fbOpen(bExecute:=FALSE);
    IF NOT fbOpen.bBusy THEN
        IF fbOpen.bError THEN
            state := 5;
            M_ReadData := FALSE;
        ELSE
            hFile := fbOpen.hFile;
            state := 2;
        END_IF;
        fbOpen(bExecute:=FALSE);
    END_IF;
    
// 2: INITIATE_READ
2:
    fbRead(sNetId:=sNetId, hFile:=hFile, sLine=>sLine, bExecute:=FALSE);
    state := 10; // Wait phase
    returnState := 3;
    
// 3: PROCESS_READ
3:
    fbRead(sNetId:=sNetId, hFile:=hFile, sLine=>sLine, bExecute:=TRUE);
    IF NOT fbRead.bBusy THEN
        IF fbRead.bError OR fbRead.bEOF THEN
            state := 4; // Proceed to close file
        ELSE
            IF sLine = '' THEN
                state := 2; // Try reading again
                M_ReadData := FALSE;
                RETURN;
            END_IF;
            hashPos := FIND(sLine, '#'); // '#' is the separator between temp and time data
            tempStr := LEFT(sLine, hashPos - 1); // Temperature data
            timeStr := RIGHT(sLine, LEN(sLine) - hashPos); // Time data

            validEntries := SplitCSV(tempStr, ADR(tempVals));
            FOR i := 0 TO validEntries - 1 DO
                tempData[i] := STRING_TO_REAL(tempVals[i]);
            END_FOR;

            validEntries := SplitCSV(timeStr, ADR(timeVals));
            FOR i := 0 TO validEntries - 1 DO
                timeData[i] := STRING_TO_REAL(timeVals[i]);
            END_FOR;

            state := 2; // Prepare for the next read cycle
            M_ReadData := TRUE;
            RETURN; // New batch processed, return true for this batch
        END_IF;
        fbRead(bExecute:=FALSE);
    END_IF;
    
// 4: CLOSE_FILE
4:
    fbClose(sNetId:=sNetId, hFile:=hFile, bExecute:=TRUE);
    IF NOT fbClose.bBusy THEN
        fbClose(bExecute:=FALSE);
        state := 5;
    END_IF;
    
// 5: DONE/ERROR
5:
    M_ReadData := TRUE;
    
// 10: WAIT
10:
    IF waitCounter < 5 THEN
        waitCounter := waitCounter + 1;
    ELSE
        waitCounter := 0;
        state := returnState;
    END_IF;
    
END_CASE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteData" Id="{626e2e9f-860d-4e7f-a600-8b786b180d29}">
      <Declaration><![CDATA[METHOD PRIVATE M_WriteData : BOOL
VAR_INPUT
    validEntries: INT := 0;
    tempData: ARRAY[0..10] OF REAL;
    timeData: ARRAY[0..10] OF REAL;
    clearFile: BOOL := FALSE;
END_VAR
VAR
    sPath   : STRING(80) := 'C:\PIDTuner\DataLog.txt';
    sDirName: STRING(80) := 'C:\PIDTuner\';
    sNetId  : T_AmsNetId := '';  // Target system (empty is local)
    i       : INT;
END_VAR
VAR_STAT
    sLine   : STRING(255);
    hFile   : UINT;
    fbOpen : FB_FileOpen;
    fbWrite: FB_FileWrite;
    fbClose: FB_FileClose;
    fbCreateDir: FB_CreateDir;
    state : INT := 0;  // Initial state: OPEN_FILE
    waitCounter : INT := 0;
    returnState: INT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE state OF
// 0: OPEN_FILE
0:
    fbOpen(bExecute := FALSE);
    IF NOT clearFile THEN
        fbOpen(
            sNetId   := sNetId,
            sPathName:= sPath,
            nMode    := FOPEN_MODEAPPEND OR FOPEN_MODETEXT,
            ePath    := PATH_GENERIC,
            bExecute := TRUE
        );
    ELSE
        fbOpen(
            sNetId   := sNetId,
            sPathName:= sPath,
            nMode    := FOPEN_MODEWRITE OR FOPEN_MODETEXT,
            ePath    := PATH_GENERIC,
            bExecute := TRUE
        );
    END_IF;
    returnState := 1;  // Next state: CHECK_OPEN
    state       := 10; // Wait

// 1: CHECK_OPEN
1:
    fbOpen(bExecute := FALSE);
    IF NOT fbOpen.bBusy THEN
        IF fbOpen.bError THEN
            state       := 9;  // ERROR state
            M_WriteData := FALSE;
        ELSE
            hFile := fbOpen.hFile;
            IF clearFile THEN
                state := 6; // Skip to CLOSE_FILE
            ELSE
                state := 2; // Next: WRITE_TEMP
            END_IF;
        END_IF;
        fbOpen(bExecute := FALSE);
    END_IF;

// 2: WRITE_TEMP
2:
    sLine := '';
    FOR i := 0 TO validEntries - 1 DO
        sLine := CONCAT(sLine, REAL_TO_STRING(tempData[i]));
        IF i < validEntries - 1 THEN
            sLine := CONCAT(sLine, ',');
        END_IF;
    END_FOR;
    sLine := CONCAT(sLine, '#'); // Append delimiter
    fbWrite(bExecute := FALSE);
    fbWrite(
        sNetId     := sNetId,
        hFile      := hFile,
        pWriteBuff := ADR(sLine),
        cbWriteLen := INT_TO_UDINT(LEN(sLine)),
        bExecute   := TRUE
    );
    returnState := 3; // Next state: CHECK_WRITE_TEMP
    state       := 10; // Wait

// 3: CHECK_WRITE_TEMP
3:
    fbWrite(bExecute := FALSE);
    IF NOT fbWrite.bBusy THEN
        IF fbWrite.bError THEN
            state       := 9;  // ERROR state
            M_WriteData := FALSE;
        ELSE
            state := 4;  // Next: WRITE_TIME
        END_IF;
        fbWrite(bExecute := FALSE);
    END_IF;

// 4: WRITE_TIME
4:
    sLine := '';
    FOR i := 0 TO validEntries - 1 DO
        sLine := CONCAT(sLine, REAL_TO_STRING(timeData[i]));
        IF i < validEntries - 1 THEN
            sLine := CONCAT(sLine, ',');
        END_IF;
    END_FOR;
    sLine := CONCAT(sLine, '$n'); // Append newline
    fbWrite(bExecute := FALSE);
    fbWrite(
        sNetId     := sNetId,
        hFile      := hFile,
        pWriteBuff := ADR(sLine),
        cbWriteLen := INT_TO_UDINT(LEN(sLine)),
        bExecute   := TRUE
    );
    returnState := 5; // Next state: CHECK_WRITE_TIME
    state       := 10; // Wait

// 5: CHECK_WRITE_TIME
5:
    fbWrite(bExecute := FALSE);
    IF NOT fbWrite.bBusy THEN
        IF fbWrite.bError THEN
            state       := 9;  // ERROR state
            M_WriteData := FALSE;
        ELSE
            state := 6; // Next: CLOSE_FILE
        END_IF;
        fbWrite(bExecute := FALSE);
    END_IF;

// 6: CLOSE_FILE
6:
    fbClose(bExecute := FALSE);
    fbClose(
        sNetId   := sNetId,
        hFile    := hFile,
        bExecute := TRUE
    );
    returnState := 7; // Next state: CHECK_CLOSE
    state       := 10; // Wait

// 7: CHECK_CLOSE
7:
    fbClose(bExecute := FALSE);
    IF NOT fbClose.bBusy THEN
        fbClose(bExecute := FALSE);
        state       := 0;  // Reset to OPEN_FILE for next write
        M_WriteData := TRUE;
    END_IF;

// 9: ERROR
9:
    IF fbOpen.nErrId = 1804 THEN
        fbCreateDir(bExecute := FALSE);
        fbCreateDir(
            sNetId   := sNetId,
            sPathName:= sDirName,
            ePath    := PATH_GENERIC,
            bExecute := TRUE
        );
        state := 8; // Move to CREATE_DIR
        RETURN;
    END_IF;
    state       := 0;
    M_WriteData := FALSE;

// 8: CREATE_DIR
8:
    fbCreateDir(bExecute := FALSE);
    IF NOT fbCreateDir.bBusy THEN
        state := 0;
    END_IF;

// 10: WAIT
10:
    IF waitCounter < 5 THEN
        waitCounter := waitCounter + 1;
    ELSE
        waitCounter := 0;
        state       := returnState;
    END_IF;

END_CASE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SplitCSV" Id="{ac005ce8-ebff-429c-8935-90c4bec2193e}">
      <Declaration><![CDATA[METHOD PRIVATE SplitCSV : INT
VAR_INPUT
    input : STRING(100);
    output: POINTER TO ARRAY[0..10] OF STRING(10);
END_VAR
VAR
    i, count, commaPos: INT;
    remaining: STRING(100);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[remaining := input;
count := 0;

WHILE LEN(remaining) > 0 AND count < 10 DO
    commaPos := FIND(remaining, ',');
    IF commaPos = 0 THEN
        output^[count] := remaining;
        remaining := '';
    ELSE
        output^[count] := LEFT(remaining, commaPos - 1);
        remaining := RIGHT(remaining, LEN(remaining) - commaPos);
    END_IF
    count := count + 1;
END_WHILE

SplitCSV := count;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>